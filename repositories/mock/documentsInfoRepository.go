// Code generated by MockGen. DO NOT EDIT.
// Source: repositories/documentsInfoRepository.go

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	gomock "github.com/golang/mock/gomock"
	errs "github.com/studtool/common/errs"
	types "github.com/studtool/common/types"
	models "github.com/studtool/documents-service/models"
	repositories "github.com/studtool/documents-service/repositories"
	reflect "reflect"
)

// MockDocumentsInfoRepository is a mock of DocumentsInfoRepository interface
type MockDocumentsInfoRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDocumentsInfoRepositoryMockRecorder
}

// MockDocumentsInfoRepositoryMockRecorder is the mock recorder for MockDocumentsInfoRepository
type MockDocumentsInfoRepositoryMockRecorder struct {
	mock *MockDocumentsInfoRepository
}

// NewMockDocumentsInfoRepository creates a new mock instance
func NewMockDocumentsInfoRepository(ctrl *gomock.Controller) *MockDocumentsInfoRepository {
	mock := &MockDocumentsInfoRepository{ctrl: ctrl}
	mock.recorder = &MockDocumentsInfoRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDocumentsInfoRepository) EXPECT() *MockDocumentsInfoRepositoryMockRecorder {
	return m.recorder
}

// AddDocumentInfo mocks base method
func (m *MockDocumentsInfoRepository) AddDocumentInfo(info *models.DocumentInfo) *errs.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddDocumentInfo", info)
	ret0, _ := ret[0].(*errs.Error)
	return ret0
}

// AddDocumentInfo indicates an expected call of AddDocumentInfo
func (mr *MockDocumentsInfoRepositoryMockRecorder) AddDocumentInfo(info interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDocumentInfo", reflect.TypeOf((*MockDocumentsInfoRepository)(nil).AddDocumentInfo), info)
}

// GetDocumentInfoByID mocks base method
func (m *MockDocumentsInfoRepository) GetDocumentInfoByID(info *models.DocumentInfo) *errs.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDocumentInfoByID", info)
	ret0, _ := ret[0].(*errs.Error)
	return ret0
}

// GetDocumentInfoByID indicates an expected call of GetDocumentInfoByID
func (mr *MockDocumentsInfoRepositoryMockRecorder) GetDocumentInfoByID(info interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDocumentInfoByID", reflect.TypeOf((*MockDocumentsInfoRepository)(nil).GetDocumentInfoByID), info)
}

// GetDocumentsInfoByOwnerID mocks base method
func (m *MockDocumentsInfoRepository) GetDocumentsInfoByOwnerID(ownerID types.ID, page repositories.Page) (models.DocumentsInfo, *errs.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDocumentsInfoByOwnerID", ownerID, page)
	ret0, _ := ret[0].(models.DocumentsInfo)
	ret1, _ := ret[1].(*errs.Error)
	return ret0, ret1
}

// GetDocumentsInfoByOwnerID indicates an expected call of GetDocumentsInfoByOwnerID
func (mr *MockDocumentsInfoRepositoryMockRecorder) GetDocumentsInfoByOwnerID(ownerID, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDocumentsInfoByOwnerID", reflect.TypeOf((*MockDocumentsInfoRepository)(nil).GetDocumentsInfoByOwnerID), ownerID, page)
}

// GetDocumentsInfoByOwnerIDAndSubject mocks base method
func (m *MockDocumentsInfoRepository) GetDocumentsInfoByOwnerIDAndSubject(info *models.DocumentsInfo, page repositories.Page) (models.DocumentsInfo, *errs.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDocumentsInfoByOwnerIDAndSubject", info, page)
	ret0, _ := ret[0].(models.DocumentsInfo)
	ret1, _ := ret[1].(*errs.Error)
	return ret0, ret1
}

// GetDocumentsInfoByOwnerIDAndSubject indicates an expected call of GetDocumentsInfoByOwnerIDAndSubject
func (mr *MockDocumentsInfoRepositoryMockRecorder) GetDocumentsInfoByOwnerIDAndSubject(info, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDocumentsInfoByOwnerIDAndSubject", reflect.TypeOf((*MockDocumentsInfoRepository)(nil).GetDocumentsInfoByOwnerIDAndSubject), info, page)
}

// UpdateDocumentTitleByID mocks base method
func (m *MockDocumentsInfoRepository) UpdateDocumentTitleByID(update *models.DocumentTitleUpdate) *errs.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDocumentTitleByID", update)
	ret0, _ := ret[0].(*errs.Error)
	return ret0
}

// UpdateDocumentTitleByID indicates an expected call of UpdateDocumentTitleByID
func (mr *MockDocumentsInfoRepositoryMockRecorder) UpdateDocumentTitleByID(update interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDocumentTitleByID", reflect.TypeOf((*MockDocumentsInfoRepository)(nil).UpdateDocumentTitleByID), update)
}

// UpdateDocumentSubjectByID mocks base method
func (m *MockDocumentsInfoRepository) UpdateDocumentSubjectByID(update *models.DocumentSubjectUpdate) *errs.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDocumentSubjectByID", update)
	ret0, _ := ret[0].(*errs.Error)
	return ret0
}

// UpdateDocumentSubjectByID indicates an expected call of UpdateDocumentSubjectByID
func (mr *MockDocumentsInfoRepositoryMockRecorder) UpdateDocumentSubjectByID(update interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDocumentSubjectByID", reflect.TypeOf((*MockDocumentsInfoRepository)(nil).UpdateDocumentSubjectByID), update)
}

// DeleteDocumentByID mocks base method
func (m *MockDocumentsInfoRepository) DeleteDocumentByID(documentID types.ID) *errs.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDocumentByID", documentID)
	ret0, _ := ret[0].(*errs.Error)
	return ret0
}

// DeleteDocumentByID indicates an expected call of DeleteDocumentByID
func (mr *MockDocumentsInfoRepositoryMockRecorder) DeleteDocumentByID(documentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDocumentByID", reflect.TypeOf((*MockDocumentsInfoRepository)(nil).DeleteDocumentByID), documentID)
}

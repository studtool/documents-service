// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	types "github.com/studtool/common/types"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonDe066f3DecodeGithubComStudtoolDocumentsServiceModels(in *jlexer.Lexer, out *UpdateInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "userId":
			out.UserID = types.ID(in.String())
		case "timestamp":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Timestamp).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDe066f3EncodeGithubComStudtoolDocumentsServiceModels(out *jwriter.Writer, in UpdateInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"userId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UserID))
	}
	{
		const prefix string = ",\"timestamp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Timestamp).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdateInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDe066f3EncodeGithubComStudtoolDocumentsServiceModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UpdateInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDe066f3EncodeGithubComStudtoolDocumentsServiceModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdateInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDe066f3DecodeGithubComStudtoolDocumentsServiceModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UpdateInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDe066f3DecodeGithubComStudtoolDocumentsServiceModels(l, v)
}
func easyjsonDe066f3DecodeGithubComStudtoolDocumentsServiceModels1(in *jlexer.Lexer, out *DocumentsInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(DocumentsInfo, 0, 1)
			} else {
				*out = DocumentsInfo{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 DocumentInfo
			(v1).UnmarshalEasyJSON(in)
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDe066f3EncodeGithubComStudtoolDocumentsServiceModels1(out *jwriter.Writer, in DocumentsInfo) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			(v3).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v DocumentsInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDe066f3EncodeGithubComStudtoolDocumentsServiceModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DocumentsInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDe066f3EncodeGithubComStudtoolDocumentsServiceModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DocumentsInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDe066f3DecodeGithubComStudtoolDocumentsServiceModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DocumentsInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDe066f3DecodeGithubComStudtoolDocumentsServiceModels1(l, v)
}
func easyjsonDe066f3DecodeGithubComStudtoolDocumentsServiceModels2(in *jlexer.Lexer, out *DocumentTitleUpdate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "newTitle":
			out.NewTitle = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDe066f3EncodeGithubComStudtoolDocumentsServiceModels2(out *jwriter.Writer, in DocumentTitleUpdate) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"newTitle\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.NewTitle))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DocumentTitleUpdate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDe066f3EncodeGithubComStudtoolDocumentsServiceModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DocumentTitleUpdate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDe066f3EncodeGithubComStudtoolDocumentsServiceModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DocumentTitleUpdate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDe066f3DecodeGithubComStudtoolDocumentsServiceModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DocumentTitleUpdate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDe066f3DecodeGithubComStudtoolDocumentsServiceModels2(l, v)
}
func easyjsonDe066f3DecodeGithubComStudtoolDocumentsServiceModels3(in *jlexer.Lexer, out *DocumentSubjectUpdate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "newSubject":
			out.NewSubject = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDe066f3EncodeGithubComStudtoolDocumentsServiceModels3(out *jwriter.Writer, in DocumentSubjectUpdate) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"newSubject\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.NewSubject))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DocumentSubjectUpdate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDe066f3EncodeGithubComStudtoolDocumentsServiceModels3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DocumentSubjectUpdate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDe066f3EncodeGithubComStudtoolDocumentsServiceModels3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DocumentSubjectUpdate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDe066f3DecodeGithubComStudtoolDocumentsServiceModels3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DocumentSubjectUpdate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDe066f3DecodeGithubComStudtoolDocumentsServiceModels3(l, v)
}
func easyjsonDe066f3DecodeGithubComStudtoolDocumentsServiceModels4(in *jlexer.Lexer, out *DocumentInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "documentId":
			out.DocumentID = types.ID(in.String())
		case "title":
			out.Title = string(in.String())
		case "ownerId":
			out.OwnerID = types.ID(in.String())
		case "subject":
			out.Subject = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDe066f3EncodeGithubComStudtoolDocumentsServiceModels4(out *jwriter.Writer, in DocumentInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"documentId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DocumentID))
	}
	{
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"ownerId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OwnerID))
	}
	{
		const prefix string = ",\"subject\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Subject))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DocumentInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDe066f3EncodeGithubComStudtoolDocumentsServiceModels4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DocumentInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDe066f3EncodeGithubComStudtoolDocumentsServiceModels4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DocumentInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDe066f3DecodeGithubComStudtoolDocumentsServiceModels4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DocumentInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDe066f3DecodeGithubComStudtoolDocumentsServiceModels4(l, v)
}

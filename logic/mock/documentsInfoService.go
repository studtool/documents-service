// Code generated by MockGen. DO NOT EDIT.
// Source: logic/documentsInfoService.go

// Package mock_logic is a generated GoMock package.
package mock_logic

import (
	gomock "github.com/golang/mock/gomock"
	errs "github.com/studtool/common/errs"
	logic "github.com/studtool/documents-service/logic"
	reflect "reflect"
)

// MockDocumentsInfoService is a mock of DocumentsInfoService interface
type MockDocumentsInfoService struct {
	ctrl     *gomock.Controller
	recorder *MockDocumentsInfoServiceMockRecorder
}

// MockDocumentsInfoServiceMockRecorder is the mock recorder for MockDocumentsInfoService
type MockDocumentsInfoServiceMockRecorder struct {
	mock *MockDocumentsInfoService
}

// NewMockDocumentsInfoService creates a new mock instance
func NewMockDocumentsInfoService(ctrl *gomock.Controller) *MockDocumentsInfoService {
	mock := &MockDocumentsInfoService{ctrl: ctrl}
	mock.recorder = &MockDocumentsInfoServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDocumentsInfoService) EXPECT() *MockDocumentsInfoServiceMockRecorder {
	return m.recorder
}

// AddDocumentInfo mocks base method
func (m *MockDocumentsInfoService) AddDocumentInfo(params logic.AddDocumentInfoParams) *errs.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddDocumentInfo", params)
	ret0, _ := ret[0].(*errs.Error)
	return ret0
}

// AddDocumentInfo indicates an expected call of AddDocumentInfo
func (mr *MockDocumentsInfoServiceMockRecorder) AddDocumentInfo(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDocumentInfo", reflect.TypeOf((*MockDocumentsInfoService)(nil).AddDocumentInfo), params)
}

// GetDocumentInfo mocks base method
func (m *MockDocumentsInfoService) GetDocumentInfo(params logic.GetDocumentInfoParams) *errs.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDocumentInfo", params)
	ret0, _ := ret[0].(*errs.Error)
	return ret0
}

// GetDocumentInfo indicates an expected call of GetDocumentInfo
func (mr *MockDocumentsInfoServiceMockRecorder) GetDocumentInfo(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDocumentInfo", reflect.TypeOf((*MockDocumentsInfoService)(nil).GetDocumentInfo), params)
}

// UpdateDocumentTitle mocks base method
func (m *MockDocumentsInfoService) UpdateDocumentTitle(params logic.UpdateDocumentTitleParams) *errs.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDocumentTitle", params)
	ret0, _ := ret[0].(*errs.Error)
	return ret0
}

// UpdateDocumentTitle indicates an expected call of UpdateDocumentTitle
func (mr *MockDocumentsInfoServiceMockRecorder) UpdateDocumentTitle(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDocumentTitle", reflect.TypeOf((*MockDocumentsInfoService)(nil).UpdateDocumentTitle), params)
}

// UpdateDocumentSubject mocks base method
func (m *MockDocumentsInfoService) UpdateDocumentSubject(params logic.UpdateDocumentSubjectParams) *errs.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDocumentSubject", params)
	ret0, _ := ret[0].(*errs.Error)
	return ret0
}

// UpdateDocumentSubject indicates an expected call of UpdateDocumentSubject
func (mr *MockDocumentsInfoServiceMockRecorder) UpdateDocumentSubject(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDocumentSubject", reflect.TypeOf((*MockDocumentsInfoService)(nil).UpdateDocumentSubject), params)
}

// DeleteDocument mocks base method
func (m *MockDocumentsInfoService) DeleteDocument(params logic.DeleteDocumentParams) *errs.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDocument", params)
	ret0, _ := ret[0].(*errs.Error)
	return ret0
}

// DeleteDocument indicates an expected call of DeleteDocument
func (mr *MockDocumentsInfoServiceMockRecorder) DeleteDocument(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDocument", reflect.TypeOf((*MockDocumentsInfoService)(nil).DeleteDocument), params)
}
